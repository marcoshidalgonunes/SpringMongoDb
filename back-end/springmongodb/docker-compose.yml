services:

  api:
    container_name: springmongodb
    image: ${DOCKER_REGISTRY-}springmongodb
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      mongo:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    links:
      - mongo
      - keycloak
    networks:
      - lan-network
    ports:
      - 8081:8081
      - 9010:9010 # JMX Port

  mongo:
    container_name: bookstoredb
    image: mongo
    restart: always
    volumes:
      - mongodata:/data/db
    networks:
      - lan-network        
    ports:
      - 27017:27017
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongo:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  keycloak:
      image: quay.io/keycloak/keycloak:latest
      container_name: keycloak
      ports:
        - 8080:8080
      restart: always
      command:
        - start-dev
      environment:
        KEYCLOAK_ADMIN: admin
        KEYCLOAK_ADMIN_PASSWORD: admin
      networks:
        - lan-network        
      volumes:
        - keycloakdata:/opt/keycloak/data/h2
      healthcheck:
        test:
          [
            "CMD-SHELL",
            'exec 3<>/dev/tcp/localhost/8080; echo -e "GET /health/ready HTTP/1.1\nhost: localhost:8080\n" >&3; if [ $? -eq 0 ]; then echo "Healthcheck Successful";exit 0;else echo "Healthcheck Failed";exit 1;fi;'
          ]

  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector-contrib
    command: ["--config=/etc/otelcol-contrib/config.yaml"]
    volumes:
      - ./config/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    expose:
      - 4318
    ports:
      - 4318:4318
      - 8989:8989 # Prometheus metrics exposed by the Collector
    networks:
      - lan-network   

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    restart: always
    volumes:
      - ./config/prometheus-config.yaml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    depends_on:
      otel-collector:
        condition: service_started
    networks:
      - lan-network  
    healthcheck:
      test: ["CMD", "wget", "http://localhost:9090"]
      interval: 10s
      timeout: 15s
      retries: 10
      start_period: 40s 

  grafana:
    container_name: grafana
    image: ${DOCKER_REGISTRY-}grafana/grafana
    ports:
      - 3000:3000
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - lan-network
    volumes:
      - grafanadata:/var/lib/grafana
    healthcheck:
      test: 'wget -q -Y off -O /dev/null http://localhost:3000/login > /dev/null 2>&1'
      interval: 25s
      timeout: 3s
      start_period: 120s

volumes:
  mongodata:
    external: true
    name: mongodata
  keycloakdata:
    external: true
    name: keycloakdata
  grafanadata:
    external: true
    name: grafanadata

networks:
  lan-network:
    driver: bridge